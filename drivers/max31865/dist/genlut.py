#!/usr/bin/env python3

# Copyright (C) 2025 David Picard
#
# This file is subject to the terms and conditions of the GNU Lesser
# General Public License v2.1. See the file LICENSE in the top level
# directory for more details.

import argparse
import numpy as np

# Create a custom 4-column LUT:
# col 0: ADC code
# col 1: temperature in µ°c
# col 2: slope of a piece-wise linear interpolation
# col 3: offset of a piece-wise linear interpolation

parser = argparse.ArgumentParser(prog='genlut.py',
                                 description="Generate a header to define a custom lookup"
                                 " table in the current directory.")
parser.add_argument("LUTNAME", help="Suffix of the LUT name."
                    " For example, if LUTNAME is 'mylut', the header"
                    " file will be named 'max31865_mylut.h', the"
                    " LUT variable will be named 'max31865_mylut'"
                    " and the number of lines in the LUT will be named 'max31865_mylut_numlines'.")
parser.add_argument("RTD0", help="RTD resistance at 0°C (ohm).")
parser.add_argument("RREF", help="Reference resistance (ohm).")
parser.add_argument("TMIN", help="Minimum temperature of the LUT (°C). TMIN >= -200°C.")
parser.add_argument("TMAX", help="Maximum temperature of the LUT (°C). TMAX =< 850°C.")
args = parser.parse_args()

rtd0 = float(args.RTD0)
rref = float(args.RREF)
tmin = round(float(args.TMIN), -1)      # round to tens of ohm
tmax = round(float(args.TMAX), -1)      # round to tens of ohm
tstep = 10                              # °C

if tmax <= tmin:
    print("ERROR: tmax <= tmin")
    exit(1)

if (tmax - tmin) < 10.0:
    print("ERROR: (tmax - tmin) < 10°C")
    exit(1)

if tmin < -200.0:
    print("ERROR: tmin < 200°C")
    exit(1)

if tmax > 850.0:
    print("ERROR: tmax > 850°C")
    exit(1)

header = "max31865_" + args.LUTNAME + ".h"
print("creating header %s for a %d ohm RTD and a %d ohm Rref [%d, %d]..." % (header, rtd0, rref, tmin, tmax))

a = 3.90830e-3
b = -5.77500e-7
c = -4.18301e-12                # if T<0°C, 0 otherwise

# Create a table of ADC codes and temperatures.
# Reserve cells for linear interpolation coefficients.
lut = np.empty(4)
for t in range(int(tmin), int(tmax + 2*tstep), int(tstep)):
    if t < 0:
        rtd = rtd0 * (1 + a*t + b*t**2 + c*(t - 100.0) * t**3)
    else:
        rtd = rtd0 * (1 + a*t + b*t**2)
    ratio = rtd / rref
    code = round(ratio * 2**15) * 2
    # print("0x%04X, %d, %0.2f, %0.2f" % (code, t * 1e6, rtd, ratio) )
    newrow = [code, t*1e6, 0, 1]
    lut = np.vstack([lut, newrow])
lut = np.delete(lut, 0, 0)      # delete 1st line, which has undefined values


# Calculate piece-wise linear interpolation coefficients.
# T = a0 + a1 * code
(nrows, ncols) = np.shape(lut)
for i in range(0, nrows - 1):
    # slope a1 = d(T)/d(code)
    lut[i][3] = (lut[i+1][1] - lut[i][1]) / (lut[i+1][0] - lut[i][0])
    # offset a0 = T - a1 * code
    lut[i][2] = lut[i][1] - lut[i][3] * lut[i][0]
lut = np.delete(lut, -1, 0)      # delete last line, only useful to compute a0 and a1 of the previous line

# print(lut)
(nrows, ncols) = np.shape(lut)
print("nrows: %d, ncols: %d" % (nrows, ncols))

# Generate the header file.
with open(header, "w") as f:
    print('''\
/*
 * Copyright (C) 2025 David Picard
 *
 * This file is subject to the terms and conditions of the GNU Lesser
 * General Public License v2.1. See the file LICENSE in the top level
 * directory for more details.
 */

#pragma once

/**
 * @ingroup     drivers_max31865
 * @{
 *
 * @file
 * @brief       Custom lookup table
 *
 * @author      David Picard
 */

#ifdef __cplusplus
extern "C" {
#endif
''', file=f)

    print('''/** Number of lines in #max31865_{LUT} */'''.format(LUT=args.LUTNAME), file=f)
    macro_name = "MAX31865_" + args.LUTNAME.upper()
    print("#define %s        (%d)\n" % (macro_name, nrows), file=f)

    print('''\
/**
 * @ingroup drivers_max31865
 * @brief Custom lookup table for temperature conversion
 *
 * The columns of this table should be indexed by #max31865_lutcols_t.
 *
 * This lookup table was generated by @p genlut.py, provided with
 * the max31865 driver.
 *
 * Lookup table parameters:
 * - RTD @ 0°C = {RTD0}&Omega;
 * - RREF      = {RREF}&Omega;
 * - Tmin      = {TMIN}°C
 * - Tmax      = {TMAX}°C
 */'''.format(RTD0=round(rtd0), RREF=round(rref), TMIN=round(tmin), TMAX=round(tmax)), file=f)
    print("static const int32_t max31865_" + args.LUTNAME + "[][4] =", file=f)
    for i in range(0, nrows):
        if i == 0:
            line = "{ { 0x%04X, %d, %d, %d }"
        else:
            line = "  { 0x%04X, %d, %d, %d }"
        if i < nrows - 1:
            line = line + ","
        else:
            line = line + " };"
        print(line % (round(lut[i][0]), round(lut[i][1]), round(lut[i][2]), round(lut[i][3])), file=f)
    print("\n#ifdef __cplusplus\n}\n#endif\n\n/** @} */", file=f)
